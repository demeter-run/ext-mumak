# Job to create indexes on Mumak instance.
#
# This is difficult to automatize because it has to be ran after the postgres is created 
# and dbsync has ran, but before anyone uses it. Here you have to replace the salt, the 
# network and the network magic for it to work.
---
apiVersion: v1
data:
  indexes.sql: |
    DROP EXTENSION mumak CASCADE;
    CREATE EXTENSION mumak;

    // Temporary. Bulk insert into UTxOs.
    INSERT INTO utxos (slot, era, id, cbor)
    SELECT
      txs_with_era.slot,
      txs_with_era.era,
      CONCAT(tx_hash(txs_with_era.cbor), '#', utxos.output_index) AS id,
      utxos.cbor
    FROM (  
      SELECT slot, block_era(blocks.cbor) AS era, txs.cbor
      FROM blocks, LATERAL (SELECT * FROM unnest(block_txs_cbor(blocks.cbor))) AS txs(cbor)
    ) AS txs_with_era, LATERAL tx_outputs(txs_with_era.cbor) AS utxos;
    
    UPDATE utxos
    SET spent_slot = spent.slot 
    FROM (
      SELECT utxos.id, blocks.slot
      FROM 
        blocks,
        LATERAL (SELECT * FROM unnest(block_txs_cbor(blocks.cbor))) AS txs(cbor),
        LATERAL (SELECT * FROM unnest(tx_inputs(txs.cbor))) AS utxos(id)
    ) AS spent
    WHERE utxos.id = spent.id;

    // Oura functions:
    CREATE OR REPLACE FUNCTION apply_block_on_utxo_table(apply_slot bigint, block_hex text)
    RETURNS void AS $$
    BEGIN
      -- Insert tx outputs,
      INSERT INTO utxos (slot, era, id, cbor)
      SELECT
        txs_with_era.slot,
        txs_with_era.era,
        CONCAT(tx_hash(txs_with_era.cbor), '#', utxos.output_index) AS id,
        utxos.cbor
      FROM (  
        SELECT apply_slot AS slot, block_era(decode(block_hex, 'hex')) AS era, txs.cbor
        FROM LATERAL (SELECT * FROM unnest(block_txs_cbor(decode(block_hex, 'hex')))) AS txs(cbor)
      ) AS txs_with_era, LATERAL tx_outputs(txs_with_era.cbor) AS utxos
      ;
      -- "Spend" tx inputs
      UPDATE utxos
      SET spent_slot = apply_slot 
      WHERE id IN (
        SELECT utxos.id
        FROM 
          LATERAL (SELECT * FROM unnest(block_txs_cbor(decode(block_hex, 'hex')))) AS txs(cbor),
          LATERAL (SELECT * FROM unnest(tx_inputs(cbor))) AS utxos(id)
      );
    END;
    $$ LANGUAGE plpgsql;
    
    CREATE OR REPLACE FUNCTION undo_block_on_utxo_table(undo_slot bigint)
    RETURNS void AS $$
    BEGIN
      -- Remove UTXOs added by block.
      DELETE FROM utxos WHERE slot = undo_slot;
      -- "Unspend" UTXOs spent on block
      UPDATE utxos SET spent_slot = NULL WHERE spent_slot = undo_slot;
    END;
    $$ LANGUAGE plpgsql;
    
    CREATE OR REPLACE FUNCTION reset_block_on_utxo_table(reset_slot bigint)
    RETURNS void AS $$
    BEGIN
      -- Remove UTXOs added by blocks that are after reset.
      DELETE FROM utxos WHERE slot > reset_slot;
      -- "Unspend" UTXOs spent on blocks after reset.
      UPDATE utxos SET spent_slot = NULL WHERE spent_slot > reset_slot;
    END;
    $$ LANGUAGE plpgsql;

    // Indexes
    CREATE INDEX block_number_idx ON blocks ((block_number(cbor)));
    CREATE INDEX block_pool_id_idx ON blocks ((block_pool_id(cbor)));
    CREATE INDEX block_epoch_idx ON blocks ((block_epoch(cbor, {network_magic})));
    CREATE INDEX block_slot_as_time_idx ON blocks ((block_slot_as_time(cbor, {network_magic})));
    CREATE INDEX block_slot_idx ON blocks (block_slot(cbor));

    CREATE INDEX idx_tx_hash ON txs (tx_hash(cbor));
    CREATE INDEX idx_gin_tx_inputs ON txs USING GIN (tx_inputs(cbor));
    CREATE INDEX idx_gin_tx_addresses ON txs USING GIN (tx_addresses(cbor));
    CREATE INDEX idx_gin_tx_outputs_json ON txs USING GIN (tx_outputs_json(cbor));
    CREATE INDEX idx_gin_tx_plutus_data ON txs USING GIN (tx_plutus_data(cbor));
    CREATE INDEX idx_gin_tx_mint ON txs USING GIN (tx_mint(cbor));

    CREATE INDEX idx_utxo_address ON utxos (utxo_address(era, cbor));
immutable: false
kind: ConfigMap
metadata:
  name: create-indexes-config-postgres-mumak-m0-{salt}-{network}
  namespace: ext-mumak-m0
---
apiVersion: batch/v1
kind: Job
metadata:
  generation: 1
  name: create-indexes-job-postgres-mumak-m0-{salt}-{network}
  namespace: ext-mumak-m0
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - command:
        - psql
        - -U
        - postgres
        - -h
        - postgres-{salt}
        - -d
        - cardano-{network}
        - -f
        - /etc/sql/indexes.sql
        - -e
        - -v
        - VERBOSITY=verbose
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: postgres-secret
              optional: false
        image: postgres:14.10-bullseye
        name: main
        resources:
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 200m
            memory: 512Mi
        volumeMounts:
        - mountPath: /etc/sql/
          name: query
      tolerations:
      - effect: NoSchedule
        key: demeter.run/compute-profile
        operator: Equal
        value: general-purpose
      - effect: NoSchedule
        key: demeter.run/compute-arch
        operator: Equal
        value: x86
      - effect: NoSchedule
        key: demeter.run/availability-sla
        operator: Equal
        value: best-effort
      volumes:
      - configMap:
          defaultMode: 420
          name: create-indexes-config-postgres-mumak-m0-{salt}-{network}
          optional: false
        name: query
